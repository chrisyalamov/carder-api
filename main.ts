import { Hono } from "npm:hono"
import db from "./db/db.ts"
import { openAPISpecs } from "hono-openapi"
import { apiReference } from "npm:@scalar/hono-api-reference"
import organisationsRouter from "./routes/organisations/index.ts"
import caisRouter from "./routes/cais/index.ts"
import licensesRouter from "./routes/licenses/index.ts"
import eventsRouter from "./routes/events/index.ts"
import purchasingRouter from "./routes/purchasing/index.ts"
import { Session, sessionMiddleware } from "./utils/session-middleware.ts"
import { dbMiddleware } from "./utils/db-middleware.ts"
import { corsMiddleware } from "./utils/cors-middleware.ts"
import { stripeMiddleware } from "./utils/stripe-middleware.ts"
import { ApplicationError } from "./utils/application-error.ts"
import { HTTPException } from "hono/http-exception"
import { s } from "./utils/stripe-middleware.ts"

export type Env = {
  Variables: {
    session: Session
    database: typeof db
    organisationId: string | null
    stripe: typeof s
  }
}

const app = new Hono<Env>()

app.onError((err, c) => {
  if (err instanceof ApplicationError) {
    return c.json(
      {
        success: false,
        error: {
          message: err.message,
          name: err.name,
          type: err.type,
          details: err.details,
        },
      },
      err.statusCode
    )
  } else if (err instanceof HTTPException) {
    return c.json(
      {
        success: false,
        error: {
          message: err.message,
          name: err.name,
        },
      },
      err.status
    )
  } else {
    return c.json(
      {
        success: false,
        error: {
          message: err.message,
          name: err.name,
        },
      },
      500
    )
  }
})
app.use(dbMiddleware)
app.use(sessionMiddleware)
app.use(corsMiddleware)
app.use(stripeMiddleware)

app.route("/organisations", organisationsRouter)
app.route("/cais", caisRouter)
app.route("/licenses", licensesRouter)
app.route("/events", eventsRouter)
app.route("/purchasing", purchasingRouter)

// OpenAPI specification (autogenerated)
app.get(
  "/openapi",
  openAPISpecs<Env>(app, {
    documentation: {
      info: {
        title: "Carder API",
        version: "1.0.0",
        description:
          "This API provides an interface to the Carder events platform.",
      },
    },
  })
)

// API playground (autogenerated, using OpenAPI spec)
app.get(
  "/docs",
  apiReference({
    theme: "default",
    url: "/openapi",
  })
)

Deno.serve(app.fetch)
